/*
  Tratando e lan√ßando erros (try, catch, finally)
    O try executa um bloco de c√≥digo e
    o catch captura o erro e podemos tratar ele
    o finally sempre ser√° executado no final do try ou do catch.

  Afinalidade desse recurso √© tratar erros
    para que o c√≥digo n√£o quebre
    e o usu√°rio receba uma mensagem amig√°vel
    em vez de um monte de c√≥digo que ele n√£o entende.

  try
    O bloco try ele significa tentar
    ou seja, tente executar esse bloco de c√≥digo.

  catch (err)
    O bloco catch ele significa capturar
    ou seja, se der algum erro no bloco try
    capture esse erro e me d√™ uma vari√°vel err
    para que eu possa tratar esse erro.

  finally
    O bloco finally ele significa finalmente
    ou seja, independente do resultado do try
    ou do catch, execute esse bloco de c√≥digo.

  Observa√ß√£o:
    N√£o √© interessante mostrar o erro para o usu√°rio
    pois o erro pode ter informa√ß√µes sens√≠veis
    que n√£o devem ser expostas.
    O ideal √© logar esse erro em um arquivo
    e mostrar uma mensagem amig√°vel para o usu√°rio.
*/

/********************************************* Exemplo 1 - try, catch e finally *************************************/

/*

  try {
    console.log(n√£o existo); // N√£o foi declarado
  } catch (err) {
    console.log('n√£o existo n√£o existe');
    console.log(err);
  }
*/


/********************************************* Exemplo 2 - try, catch e finally *************************************/

/*
  function soma(x, y) {
    if (typeof x !== 'number' || typeof y !== 'number') { // typeof faz uma verifica√ß√£o do tipo da vari√°vel 
    // (string, number, boolean, object, function, undefined)
      throw new Error('x e y precisam ser n√∫meros'); // theow √© usado para lan√ßar um erro
   }

   //return x + y;
  }

  try {
    console.log(soma(1, 2));
    console.log(soma('1', 2));
  } catch (error) {
    console.log(error);
   console.log('Alguma coisa mais amig√°vel para o usu√°rio');
  }
*/

/*********************************************** Exemplo 3 - try, catch e finally **************************************/

// function validaNumero(numero) {
//   try {
//     if (numero < 0) {
//       throw new Error("N√∫mero negativo n√£o permitido")
//     }
//     return 'N√∫mero v√°lido'
//   } catch (error) {
//     return error.message;
//   }

// }

// console.log(validaNumero(-10));



// function validaNumero(numero) {
//   try {
//     if (numero < 0) {
//       throw new Error("N√∫mero negativo n√£o permitido");
//     }
//     return "\n=== " + "N√∫mero v√°lido" + "===\n";

//   } catch (error) {
//     return "\n=== " + error.message + " ===\n";
//   }
// }

// console.log("Resultado 01", validaNumero(10));
// console.log("Resultado 02", validaNumero(-10));

/*********************************************** Exemplo 3 - try, catch e finally **************************************/

/* 
  üéØ Desafio 2: JSON seguro

    Crie uma fun√ß√£o parseJSON que:

    Receba uma string como par√¢metro.

    Tente converter a string em objeto usando JSON.parse.

    Se a convers√£o falhar (string inv√°lida), capture o erro com catch e retorne "JSON inv√°lido".

    Se a convers√£o for bem-sucedida, retorne o objeto convertido.
*/

// function parseJSON(string) {
//   try {
//     const objeto = JSON.parse(string);
//     return objeto;
//   } catch (error) {
//     return "JSON inv√°lido";
//   }
// }

// console.log(parseJSON('{"nome" : "Vagno"}'));
// console.log(parseJSON('{nome": vagno}'));


/*********************************************** Exemplo 4 - try, catch e finally **************************************/

/*
  Exerc√≠cio:

  Crie uma fun√ß√£o chamada somaSegura que:
  Receba dois par√¢metros.
  Verifique se os dois s√£o n√∫meros usando typeof.
  Se n√£o forem n√∫meros, lance um erro com throw new Error("Par√¢metros inv√°lidos").
  Use try/catch para capturar o erro e retornar a mensagem de erro.
  Se forem n√∫meros, retorne a soma.
*/

// function somaSegura(x, y) {

//   if (typeof x !== 'number' || typeof y !==  'number') {
//     throw new Error("Paramentro iv√°lido");
//   }
//   return x + y;
// }

// try {
//   // console.log(somaSegura(5, 7));
//   console.log(somaSegura(5, "a"));

// } catch (error) {
//   console.log(error.message);
// }


/*********************************************** Exemplo 5 - try, catch e finally **************************************/

/*
  Exerc√≠cio ‚Äì Valida√ß√£o de String

  Crie uma fun√ß√£o chamada validaNome que:

  Receba um par√¢metro nome.

  Verifique se o tipo √© string usando typeof.

  Se n√£o for string, lance um erro com throw new Error("Nome inv√°lido").

  Se for string, retorne a mensagem: "Nome v√°lido: " + nome.

  Use try/catch para capturar e mostrar a mensagem de erro quando o dado n√£o for string.
*/

function validaNome (nome) {
  if(typeof nome !== 'string') {
    throw new Error('Nome iv√°lido!');
  }
  return 'Nome v√°lido: '+ nome;
}

try {
  console.log(validaNome('Maria'));
  console.log(validaNome(123));
} catch (error) {
  console.log(error.message)
}